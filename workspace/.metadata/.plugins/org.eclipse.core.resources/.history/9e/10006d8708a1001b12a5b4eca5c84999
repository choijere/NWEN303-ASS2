package model;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;

public class Model {
	public static final double size = 900;// just for the canvas
	public static final double gravitationalConstant = 0.001;
	public static final double lightSpeed = 10;// the smaller, the larger is the chunk of universe we simulate
	public static final double timeFrame = 0.1;// the bigger, the shorter is the time of a step, the slower but more
												// precise the simulation
	public List<Particle> p = new ArrayList<Particle>(); //ALL particles in the simulation.
	public volatile List<DrawableParticle> pDraw = new ArrayList<DrawableParticle>();

	/**
	 * Update through time itself.
	 * Display the updated Graphical Representation.
	 * This method is called from the GUI.
	 */
	public void step() {
		//FIRST: Cycle through all particles and...
		for (Particle p : this.p) {
			//... Process any interactions it has with any other particles in this model.
			p.interact(this);
		}
		//SECOND: Cycle through all particles and update movement.
		for (Particle p : this.p) {
			p.move();
		}
		//THIRD: Merge any colliding particles while deleting dead ones.
		mergeParticles();
		//FOURTH: Draw everything
		updateGraphicalRepresentation();
	}

	/**
	 * The draw method for this model.
	 * Call this last in the step method.
	 */
	private void updateGraphicalRepresentation() {
		ArrayList<DrawableParticle> d = new ArrayList<DrawableParticle>();
		Color c = Color.ORANGE;
		for (Particle p : this.p) {
			d.add(new DrawableParticle((int) p.x, (int) p.y, (int) Math.sqrt(p.mass), c));
		}
		this.pDraw = d;// atomic update
	}

	/**
	 * Mer
	 */
	private void mergeParticles() {
		Stack<Particle> deadPs = new Stack<Particle>();
		for (Particle p : this.p) {
			if (!p.impacting.isEmpty()) {
				deadPs.add(p);
			}
			//;
		}
		this.p.removeAll(deadPs);
		while (!deadPs.isEmpty()) {
			Particle current = deadPs.pop();
			Set<Particle> ps = getSingleChunck(current);
			deadPs.removeAll(ps);
			this.p.add(mergeParticles(ps));
		}
	}

	/**
	 * Return a set of particles dead particles,
	 * Particles that don't move.
	 * @param current
	 * @return
	 */
	private Set<Particle> getSingleChunck(Particle current) {
		Set<Particle> impacting = new HashSet<Particle>();
		impacting.add(current);
		while (true) {
			
			Set<Particle> tmp = new HashSet<Particle>();
			for (Particle pi : impacting) {
				tmp.addAll(pi.impacting);
			}
			
			//If the while loop has finished adding new particles.
			boolean changed = impacting.addAll(tmp); 
			if (!changed) {
				break;
			}
		}
		// now impacting have all the chunk of collapsing particles
		return impacting;
	}

	/**
	 * Merges a set of particles into singular one.
	 * Achieves this by combining all their stats together and returns the complete result
	 * @param ps 	Set of all the particles to be merged.
	 * @return 	Particle
	 */
	public Particle mergeParticles(Set<Particle> ps) {
		double speedX = 0;
		double speedY = 0;
		double x = 0;
		double y = 0;
		double mass = 0;
		for (Particle p : ps) {
			mass += p.mass;
			x += p.x * p.mass;
			y += p.y * p.mass;
			speedX += p.speedX * p.mass;
			speedY += p.speedY * p.mass;
		}
		x /= mass;
		y /= mass;
		speedX /= mass;
		speedY /= mass;
		return new Particle(mass, speedX, speedY, x, y);
	}
}
