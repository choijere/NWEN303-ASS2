package gui.runTests;

import java.awt.BorderLayout;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JWindow;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

import datasets.DataSetLoaderWithHolders;
import gui.Canvas;
import gui.Gui;
import model.Model;
import model.ModelInterface;
import model.ModelParallel;

/**
 * Run's everything, including all the models, whilst also testing correctness and time.
 * Prints a detailed report upon completion.
 * 
 * WARNING: Might take a little while.
 * 
 * @author Student#300474835
 *
 */

@SuppressWarnings("serial")
public class RunTests extends JFrame implements Runnable {
	private static int minTime = 20;// use a bigger or smaller number for faster/slower simulation top speed
	// it will attempt to do a step every 20 milliseconds (less if the machine is
	// too slow)

	public static final ScheduledThreadPoolExecutor schedulerRepaint = new ScheduledThreadPoolExecutor(1);
	public static final ScheduledThreadPoolExecutor schedulerSimulation = new ScheduledThreadPoolExecutor(1);
	
	private final static boolean parallelSwitch = true;
	
	ModelInterface m;

	RunTests(ModelInterface m) {
		this.m = m;
	}

	/**
	 * This method handles the graphical representation of the simulation.
	 * It contains the schedulerRepaint instructions.
	 */
	public void run() {
		//GUI stuff
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		getRootPane().setLayout(new BorderLayout());
		JPanel p = new Canvas(m);
		p.setDoubleBuffered(true);
		getRootPane().add(p, BorderLayout.CENTER);
		pack();
		setVisible(true);
		//Sends "Execute the following" orders to a worker repeatedly at a consistent rate.
		schedulerRepaint.scheduleAtFixedRate(() -> {
			if (!schedulerRepaint.getQueue().isEmpty()) {
				System.out.println("Skipping a frame");
				System.close(0);
				return;
			} // still repainting

			try {
				//The actual "draw" method.
				SwingUtilities.invokeAndWait(() -> repaint());
			} // You may want to explain why this is needed
			catch (InvocationTargetException | InterruptedException e) {// not a perfect solution, but
				e.printStackTrace();// makes sure you see the error and the program dies.
				System.exit(0);// the "right" solution is much more involved
			} // and would require storing and passing the exception between different threads
				// objects.
		}, 500, 5, TimeUnit.MILLISECONDS);
	}

	/**
	 * This is called from the main() at the bottom of this java file.
	 * It's passed the Model upon construction.
	 * It's run() function invokes the logic built within the Model (by calling "step()").
	 *
	 * There is no thread pool or scheduler executor within this class. It is called from the outside, Possible bug!
	 *
	 * @author Student#300474835
	 *
	 */
	private static final class MainLoop implements Runnable {
		Model m;
		private volatile boolean exit = false;

		MainLoop(Model m) {
			this.m = m;
		}

		public void run() {
			try {
				while (!exit) {
					long ut = System.currentTimeMillis();
					m.step();
					ut = System.currentTimeMillis() - ut;// used time
					// System.out.println("Particles: "+m.p.size()+" time:"+ut);//if you want to
					// have an idea of the time consumption
					long sleepTime = minTime - ut;
					if (sleepTime > 1) {
						Thread.sleep(sleepTime);
					}
					if(m.completed) {
						break;
					}
				} // if the step was short enough, it wait to make it at least minTime long.
				Thread.currentThread().interrupt();
			} catch (Throwable t) {// not a perfect solution, but
				t.printStackTrace();// makes sure you see the error and the program dies.
				System.exit(0);// the "right" solution is much more involved
			} // and would require storing and passing the exception between different threads
				// objects.
		}
		
		public void stop() {
			exit = true;
		}
	}

	/**
	 * "If MainLoop is so good, why isn't there a MainLoop 2???"
	 * This version uses ModelParallel.
	 *
	 * @author Student#300474835
	 *
	 */
	private static final class MainLoop2 implements Runnable {
		ModelParallel m;
		private volatile boolean exit = false;
		
		MainLoop2(ModelParallel m) {
			this.m = m;
		}

		public void run() {
			try {
				while (!exit) {
					long ut = System.currentTimeMillis();
					m.step();
					ut = System.currentTimeMillis() - ut;// used time
					// System.out.println("Particles: "+m.p.size()+" time:"+ut);//if you want to
					// have an idea of the time consumption
					long sleepTime = minTime - ut;
					if (sleepTime > 1) {
						Thread.sleep(sleepTime);
					}
					if(m.completed) {
						break;
					}
				} // if the step was short enough, it wait to make it at least minTime long.
				Thread.currentThread().interrupt();
			} catch (Throwable t) {// not a perfect solution, but
				t.printStackTrace();// makes sure you see the error and the program dies.
				System.exit(0);// the "right" solution is much more involved
			} // and would require storing and passing the exception between different threads
				// objects.
		}
		
		public void stop() {
			exit = true;
		}
	}

	/**
	 * Here is where the SchedulerSimulation is.
	 * Every 500 miliseconds, it creates a new MainLoop with it's own running loop, with it's own passed down model.
	 * Sounds a little inefficient, probably a bug.
	 *
	 * @param args
	 */
	public static void main(String[] args) {
		//Parallel Configuration
		ModelParallel p = DataSetLoaderWithHolders.getRegularGrid2(200, 700, 10);
		MainLoop2 parallelLoop = new MainLoop2(p);
		
		//Sequential Configuration
		Model s = DataSetLoaderWithHolders.getRegularGrid(200, 700, 10);
		MainLoop sequentialLoop = new MainLoop(s);
		
		//Number of sequential and parallel configurations should be equal.
		//FIRST: Run the parallel configuration
		schedulerSimulation.schedule(parallelLoop, 500, TimeUnit.MILLISECONDS);
		try {
			System.out.println("1.");
			SwingUtilities.invokeAndWait(new RunTests(p));
			System.out.println("2.");
			
			//WAIT BLOCK
			while(!p.completed) {
				//wait
				System.out.println("3.");
			}
			parallelLoop.stop();
			
			System.out.println("Parallel test completed.");
		} catch (InvocationTargetException | InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//------------------------------------------//
		//SECOND: Run sequential configuration.
		schedulerSimulation.schedule(sequentialLoop, 500, TimeUnit.MILLISECONDS);
		try {
			System.out.println("1.");
			SwingUtilities.invokeAndWait(new RunTests(s));
			System.out.println("2.");
			
			//WAIT BLOCK
			while(!s.completed) {
				//wait
//				System.out.println("3.");
			}

			sequentialLoop.stop();
			
			System.out.println("Sequential test completed.");
		} catch (InvocationTargetException | InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}